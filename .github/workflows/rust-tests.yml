name: Rust Tests with Database

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
    secrets:
      PAT_TOKEN:
        description: 'Personal Access Token with repo access'
        required: false

jobs:
  test:
    name: Run Rust Tests
    runs-on: ubuntu-latest

    permissions:
      contents: read  # Necessary for actions/checkout

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db

    env:
      DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db

    steps:
    # Checkout the Rust repository into 'rust_repo' directory
    - name: Checkout Rust repository
      uses: actions/checkout@v3
      with:
        repository: BlakeDonn/trustystack-rust
        ref: ${{ github.ref }}
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        path: rust_repo

    # Determine the working directory
    - name: Set working directory
      id: workdir
      run: |
        if [ -d "rust_repo" ]; then
          echo "workdir=rust_repo" >> $GITHUB_OUTPUT
        else
          echo "workdir=." >> $GITHUB_OUTPUT
        fi

    # Print the working directory (optional)
    - name: Print working directory
      run: echo "Working directory is ${{ steps.workdir.outputs.workdir }}"

    # List files in the working directory (optional)
    - name: List files in working directory
      run: ls -al ${{ steps.workdir.outputs.workdir }}

    # Set up Rust
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    # Install Diesel CLI
    - name: Install Diesel CLI
      run: |
        if ! command -v diesel &> /dev/null
        then
          cargo install diesel_cli --no-default-features --features postgres
        fi

    # Wait for PostgreSQL
    - name: Wait for PostgreSQL
      run: sleep 10s

    # Run Diesel migrations in the correct directory
    - name: Run Diesel migrations
      working-directory: ${{ steps.workdir.outputs.workdir }}
      run: diesel migration run

    # Run Rust tests in the correct directory
    - name: Run Rust tests
      working-directory: ${{ steps.workdir.outputs.workdir }}
      run: cargo test -- --test-threads=1

